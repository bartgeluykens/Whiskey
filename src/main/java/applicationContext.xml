<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <!-- Getting context for database settings -->
    <context:property-placeholder location="classpath:db_${environment}.properties"/>
    <!-- Connection pool
         There are better solutions as c3po but this one gives good errormessages, wich is important during testing
      -->
	<bean id="myPool"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="url" value="${dburl}"/>
	    <property name="username" value="sa"/>
	    <property name="password" value=""/>
    </bean>
    <!-- SessionFactory, here we configure hibernate and combine hibernate with spring -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="myPool" />
        <property name="annotatedClasses">
            <list>
                <value>be.collections.whiskey.model.Whiskey</value>
                <value>be.collections.whiskey.model.WhiskeyType</value>
                <value>be.collections.whiskey.model.Brewery</value>
            </list>
        </property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.statement_cache.size">25</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<prop key="hibernate.use_outer_join">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
    <!-- Telling where spring has to look for classes -->
    <context:component-scan base-package="be.collections.whiskey.service"/>
    <context:component-scan base-package="be.collections.whiskey.model"/>

    <bean id="breweryDAO" class="be.collections.whiskey.dao.impl.BreweryDAOImpl" autowire="constructor">
        <constructor-arg value="be.collections.whiskey.model.Brewery" type="java.lang.Class"/>
    </bean>
    <bean id="whiskeyDAO" class="be.collections.whiskey.dao.impl.WhiskeyDAOImpl" autowire="constructor">
        <constructor-arg value="be.collections.whiskey.model.Whiskey" type="java.lang.Class"/>
    </bean>
    <bean id="whiskeyTypeDAO" class="be.collections.whiskey.dao.impl.WhiskeyTypeDAOImpl" autowire="constructor">
        <constructor-arg value="be.collections.whiskey.model.WhiskeyType" type="java.lang.Class"/>
    </bean>



    <!-- Hard defining a few classes
         I could annotate service right here, but than It is harder to mock these classes.
    -->
    <bean id="whiskeyService" class="be.collections.whiskey.service.impl.WhiskeyServiceImpl"/>
    <bean id="whiskeyTypeService" class="be.collections.whiskey.service.impl.WhiskeyTypeServiceImpl"/>
    <bean id="breweryService" class="be.collections.whiskey.service.impl.BreweryServiceImpl"/>


    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

</beans>
